name: CI

on:
  push:
#  pull_request:
    branches:
      - deploy-pipeline-test
  schedule:
    - cron: '0 10 * * *' # Once per day at 10am UTC

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
# eventually add in matrix here
    steps:
      - uses: actions/checkout@v2
      - name: Set branch name
        id: vars
        run: echo "::set-env name=BRANCH_NAME::${GITHUB_REF#refs/*/}"
        env:
          GITHUB_BRANCH: ${{ github.ref }}
      - name: Check branch name output
        run: echo ${{ steps.vars.outputs.BRANCH_NAME }}
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '8'
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
      - name: Build with Gradle
        run: ./gradlew clean build --continue
  snapshot_tests:
    name: Test against snapshots
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '8'
      - name: Snapshop Tests
        run: ./gradlew test -PforceMavenRepositories=snapshot -PspringVersion='5.+' -PreactorVersion=Dysprosium-BUILD-SNAPSHOT -PspringDataVersion=Lovelace-BUILD-SNAPSHOT -PlocksDisabled --stacktrace
  sonar:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '8'
      - name: Run Sonar on master
        run: ./gradlew sonarqube -PexcludeProjects='**/samples/**' -Dsonar.host.url="$SONAR_URL" -Dsonar.login="$SONAR_TOKEN" --stacktrace
        env:
          SONAR_URL: ${{ secrets.SONAR_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        if: github.ref == "refs/heads/master"
      - name: Run Sonar on given branch
        run: echo "Not on master branch"
        if: github.ref != "refs/heads/master"
  artifacts:
    name: Deploy Artifacts
    needs: [build, snapshot_tests, sonar]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '8'
      - name: Deploy Artifacts
        run: echo Deploying artifacts
#        run: ./gradlew deployArtifacts finalizeDeployArtifacts -Psigning.secretKeyRingFile=$SIGNING_KEYRING_FILE -Psigning.keyId="$GPG_KEYID" -Psigning.password="$GPG_PASSPHRASE" -PossrhUsername="$OSSRH_USERNAME" -PossrhPassword="$OSSRH_PASSWORD" -PartifactoryUsername="$ARTIFACTORY_USERNAME" -PartifactoryPassword="$ARTIFACTORY_PASSWORD" --stacktrace
#        env:
#          GPG_PASSPHRASE: ${{ GPG_PASSPHRASE }}
#          GPG_KEYID: ${{ GPG_KEYID }}
#          OSSRH_USERNAME: ${{ OSSRH_USERNAME }}
#          OSSRH_PASSWORD: ${{ OSSRH_PASSWORD }}
#          ARTIFACTORY_USERNAME: ${{ ARTIFACTORY_USERNAME }}
#          ARTIFACTORY_PASSWORD: ${{ ARTIFACTORY_PASSWORD }}
  docs:
    name: Deploy Docs
    needs: [build, snapshot_tests, sonar]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - name: Deploy Docs
        run: echo Deploying Docs
  schema:
    name: Deploy Schema
    needs: [build, snapshot_tests, sonar]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - name: Deploy Schema
        run: echo Deploying Schema


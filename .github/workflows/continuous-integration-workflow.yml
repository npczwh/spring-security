name: CI

on:
  push:
#  pull_request:
    branches:
      - deploy-pipeline-test
  schedule:
    - cron: '0 10 * * *' # Once per day at 10am UTC

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
# eventually add in matrix here
    steps:
      - uses: actions/checkout@v2
      - name: Display branch name
        run: |
          echo Running for branch "$BRANCH_NAME"
          echo test2 ${GITHUB_REF#refs/heads/}
          echo ./gradlew sonarqube -PexcludeProjects='**/samples/**' -Dsonar.projectKey="spring-security-${GITHUB_REF#refs/heads/}" -Dsonar.projectName="spring-security-${GITHUB_REF#refs/heads/}" -Dsonar.host.url="$SONAR_URL" -Dsonar.login="$SONAR_TOKEN" --stacktrace
          echo test3 "${BRANCH_NAME##*/}"
        env:
          BRANCH_NAME: ${{ github.ref }}
          SONAR_URL: ${{ secrets.SONAR_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '8'
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
      - name: Build with Gradle
        run: ./gradlew clean build --continue
  snapshot_tests:
    name: Test against snapshots
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '8'
      - name: Snapshop Tests
        run: ./gradlew test -PforceMavenRepositories=snapshot -PspringVersion='5.+' -PreactorVersion=Dysprosium-BUILD-SNAPSHOT -PspringDataVersion=Lovelace-BUILD-SNAPSHOT -PlocksDisabled --stacktrace
  sonar:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '8'
      - name: Run Sonar on given (non-master) branch
        if: ${{ github.ref != 'refs/heads/master' }}
        run: ./gradlew sonarqube -PexcludeProjects='**/samples/**' -Dsonar.projectKey="spring-security-${GITHUB_REF#refs/heads/}" -Dsonar.projectName="spring-security-${GITHUB_REF#refs/heads/}" -Dsonar.host.url="$SONAR_URL" -Dsonar.login="$SONAR_TOKEN" --stacktrace
        env:
          SONAR_URL: ${{ secrets.SONAR_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      - name: Run Sonar on master
        if: ${{ github.ref == 'refs/heads/master' }}
        run: ./gradlew sonarqube -PexcludeProjects='**/samples/**' -Dsonar.host.url=$SPRING_SONAR_HOST_URL -Dsonar.login=$SONAR_LOGIN --stacktrace
        env:
          SONAR_URL: ${{ secrets.SONAR_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  artifacts:
    name: Deploy Artifacts
#    needs: [build, snapshot_tests, sonar]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '8'
      - name: Sign archives
        run: |
          [[ "$GPG_PRIVATE_KEY" =~ "PRIVATE KEY BLOCK" ]] && echo "contains start / end headers"
          [[ "$GPG_PRIVATE_KEY" =~ "Version: GnuPG v2" ]] && echo "contains extra GnuPG line"
          export VERSION_HEADER=$'Version: GnuPG v2\n\n'
          [[ "$GPG_PRIVATE_KEY" =~ "$VERSION_HEADER" ]] && echo "contains two newlines"
          export ORG_GRADLE_PROJECT_signingKey=${GPG_PRIVATE_KEY#"$VERSION_HEADER"}
          [[ "$ORG_GRADLE_PROJECT_signingKey" =~ VERSION_HEADER ]] && echo "still contains extra GnuPG line with newlines"
          export ORG_GRADLE_PROJECT_signingPassword="$GPG_PASSPHRASE"
          ./gradlew :spring-security-core:signArchives --stacktrace
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
#          Extra comment
#          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
#          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
#          ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
#          ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
  docs:
    name: Deploy Docs
    needs: [build, snapshot_tests, sonar]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - name: Deploy Docs
        run: echo Deploying Docs
  schema:
    name: Deploy Schema
    needs: [build, snapshot_tests, sonar]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 8
      - name: Deploy Schema
        run: echo Deploying Schema


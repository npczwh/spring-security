apply plugin: 'io.spring.convention.docs'
apply plugin: 'io.spring.convention.springdependencymangement'
apply plugin: 'io.spring.convention.dependency-set'
apply plugin: 'io.spring.convention.repository'
apply plugin: 'java'

asciidoctor {
	attributes([stylesheet: 'css/style.css'])
	resources {
		from(sourceDir) {
			include "css/**"
		}
	}
}

asciidoctorj {
	def ghTag = snapshotBuild ? 'master' : project.version
	def ghUrl = "https://github.com/spring-projects/spring-security/tree/$ghTag"
	attributes 'spring-security-version' : project.version,
		'spring-boot-version' : springBootVersion,
		revnumber : project.version,
		'gh-url': ghUrl,
		'gh-samples-url': "$ghUrl/samples"
	attributeProvider resolvedVersions(project.configurations.testCompile)
}

docsZip {
	from(project(':spring-security-docs-guides').asciidoctor) {
		into 'guides'
	}
}

dependencies {
	testCompile "com.unboundid:unboundid-ldapsdk"
	testCompile "org.apache.directory.server:apacheds-core"
	testCompile "org.springframework:spring-core"
}

task printDocs {
   dependsOn 'docsZip'
   doLast {
       println '='*25
       tasks.docsZip.outputs.each { o ->
           o.files.each { f ->
               println f
           }
       }
       println '='*25
    }
}

task copyDocs {
	dependsOn 'docsZip'
	doLast {
		project.ssh.run {
			session(project.remotes.docs) {
				println "Inside the docsZip task"
				def now = System.currentTimeMillis()
				def name = project.rootProject.name
				def version = project.rootProject.version
				def tempPath = "/tmp/${name}-${now}-docs/".replaceAll(' ', '_')
				println "Attempting to mkdir $tempPath"
				execute "mkdir -p $tempPath"
				println "Done!"
				println "Attempting to copy files"
				project.tasks.docsZip.outputs.each { o ->
					put from: o.files, into: tempPath
				}
				println "Done"
				println "Attempting to unzip $tempPath*.zip -d $tempPath"
				execute "unzip $tempPath*.zip -d $tempPath"
				println "Done!"
				def extractPath = "/var/www/domains/spring.io/docs/htdocs/autorepo/docs/${name}/${version}/"
				println "extractPath $extractPath"
				execute "rm -rf $extractPath"
				println "mkdir"
				execute "mkdir -p $extractPath"
				println "mv"
				execute "mv $tempPath/docs/* $extractPath"
				println "chmod"
				execute "chmod -R g+w $extractPath"
			}
		}
	}
}

def resolvedVersions(Configuration configuration) {
	return {
		configuration.resolvedConfiguration
			.resolvedArtifacts
			.collectEntries { [(it.name + "-version"): it.moduleVersion.id.version] }
	}
}
